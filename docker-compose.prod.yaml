
services:
  # ========================================
  # NGINX - Reverse Proxy et Load Balancer
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy_prod
    networks:
      - airflow-net-v2
    ports:
      - "80:80"
      - "443:443"
    profiles:
      - us-prod
      - fr-prod
      - ch-prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - django
      - frontend
    environment:
      - DEPLOY_COUNTRY=${DEPLOY_COUNTRY:-US}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "country=${DEPLOY_COUNTRY:-US}"

  # ========================================
  # DJANGO PRODUCTION - Configurations sécurisées
  # ========================================
  django:
    environment:
      # Production settings
      - DJANGO_DEBUG=False
      - DJANGO_SECURE_SSL_REDIRECT=True
      - DJANGO_SECURE_HSTS_SECONDS=31536000
      - DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True
      - DJANGO_SECURE_CONTENT_TYPE_NOSNIFF=True
      - DJANGO_SECURE_BROWSER_XSS_FILTER=True
      - DJANGO_SESSION_COOKIE_SECURE=True
      - DJANGO_CSRF_COOKIE_SECURE=True
      # CORS restreint en production
      - CORS_ALLOW_ALL_ORIGINS=False
      - CORS_ALLOWED_ORIGINS=https://${DEPLOY_COUNTRY,,}.pandemic-predictions.org
      # Base de données production
      - POSTGRES_HOST=postgres-prod
      - POSTGRES_PORT=5432
      # Cache Redis
      - REDIS_URL=redis://redis-prod:6379/0
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-}
      # Logs structurés
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    deploy:
      # Production scaling
      replicas: ${DJANGO_REPLICAS:-2}
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '2.0'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn pandemics_project.wsgi:application 
               --bind 0.0.0.0:8000 
               --workers ${GUNICORN_WORKERS:-4} 
               --worker-class gevent 
               --worker-connections 1000 
               --max-requests 1000 
               --max-requests-jitter 100 
               --timeout 30 
               --keep-alive 5 
               --log-level info 
               --access-logfile - 
               --error-logfile -"

  # ========================================
  # FRONTEND PRODUCTION - Build optimisé
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - DEPLOY_COUNTRY=${DEPLOY_COUNTRY:-US}
        - BUILD_ENV=production
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.${DEPLOY_COUNTRY,,}.pandemic-predictions.org
      - REACT_APP_ENVIRONMENT=production
    deploy:
      replicas: ${FRONTEND_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ========================================
  # POSTGRES PRODUCTION - Haute disponibilité
  # ========================================
  postgres:
    image: postgres:13
    container_name: postgres_prod_v2
    environment:
      # Production optimizations
      - POSTGRES_SHARED_BUFFERS=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=4GB
      - POSTGRES_WORK_MEM=64MB
      - POSTGRES_MAINTENANCE_WORK_MEM=512MB
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
      # Sécurité production
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=md5
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-prod.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/opt/backups
      - ./postgres-conf:/etc/postgresql
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      postgres 
        -c max_connections=200 
        -c shared_buffers=1GB 
        -c effective_cache_size=4GB 
        -c maintenance_work_mem=512MB 
        -c checkpoint_completion_target=0.9 
        -c wal_buffers=16MB 
        -c default_statistics_target=100 
        -c random_page_cost=1.1 
        -c effective_io_concurrency=200 
        -c work_mem=64MB 
        -c min_wal_size=1GB 
        -c max_wal_size=4GB

  # ========================================
  # REDIS - Cache et sessions
  # ========================================
  redis:
    image: redis:alpine
    container_name: redis_prod_v2
    networks:
      - airflow-net-v2
    profiles:
      - us-prod
      - fr-prod
      - ch-prod
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # AIRFLOW PRODUCTION - Configuration robuste
  # ========================================
  airflow-webserver:
    environment:
      # Production Airflow settings
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis-prod:6379/1
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod/${POSTGRES_DB}
      - AIRFLOW__WEBSERVER__WORKERS=4
      - AIRFLOW__WEBSERVER__WORKER_TIMEOUT=120
      - AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=120
    deploy:
      replicas: ${AIRFLOW_WEBSERVER_REPLICAS:-2}
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '1.0'

  airflow-scheduler:
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis-prod:6379/1
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod/${POSTGRES_DB}
    deploy:
      replicas: 1  # Un seul scheduler
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Workers Celery pour Airflow
  airflow-worker:
    image: apache/airflow:2.7.2
    container_name: airflow_worker_prod
    depends_on:
      - postgres
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CELERY__BROKER_URL=redis://redis-prod:6379/1
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod/${POSTGRES_DB}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-prod/${POSTGRES_DB}
    networks:
      - airflow-net-v2
    profiles:
      - us-prod
      - fr-prod
      - ch-prod
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
    command: airflow celery worker
    deploy:
      replicas: ${AIRFLOW_WORKERS:-3}
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # ========================================
  # MONITORING PRODUCTION - Prometheus + Grafana
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_prod
    networks:
      - airflow-net-v2
    profiles:
      - us-prod  # Monitoring complet seulement pour US
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_prod
    networks:
      - airflow-net-v2
    profiles:
      - us-prod  # Monitoring complet seulement pour US
    ports:
      - "3002:3000"
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana-prod:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

  # ========================================
  # BACKUP AUTOMATIQUE PRODUCTION
  # ========================================
  backup-service:
    image: postgres:13
    container_name: backup_prod_v2
    networks:
      - airflow-net-v2
    depends_on:
      - postgres
    profiles:
      - us-prod
      - fr-prod
      - ch-prod
    volumes:
      - ./backups:/opt/backups
      - ./scripts:/opt/scripts
      - backup_logs:/var/log/backups
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pandemies}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-guigui}
      - POSTGRES_HOST=postgres-prod
      - BACKUP_SCHEDULE=0 2 * * *  # 2h du matin
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
    command: >
      sh -c "echo 'Service de backup production démarré' &&
             echo 'Schedule: ${BACKUP_SCHEDULE}' &&
             echo 'Rétention: ${BACKUP_RETENTION_DAYS} jours' &&
             # Installation de cron et AWS CLI
             apk add --no-cache dcron aws-cli &&
             # Configuration du cron
             echo '${BACKUP_SCHEDULE} /opt/scripts/backup_db.sh' > /etc/crontabs/root &&
             # Démarrage du cron
             crond -f -l 2"

# ========================================
# VOLUMES PRODUCTION
# ========================================
volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  backup_logs:
    driver: local

networks:
  airflow-net-v2:
    external: true