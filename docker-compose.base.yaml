

services:
  postgres:
    image: postgres:13
    container_name: postgres_db_v2
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-guigui}
      POSTGRES_DB: ${POSTGRES_DB:-pandemies}
      # Optimisations MSPR 2
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 256MB
    networks:
      - airflow-net-v2
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/opt/backups
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-pandemies}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  django:
    build: ./backend
    container_name: django_app_v2
    networks:
      - airflow-net-v2
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=pandemics_project.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-127.0.0.1,localhost}
      - POSTGRES_DB=${POSTGRES_DB:-pandemies}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-guigui}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DEPLOY_COUNTRY=${DEPLOY_COUNTRY:-US}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
    volumes:
      - ./backend:/django_api
      - ml_models_v2:/django_api/pandemics_app/ml/models
      - ./logs/django:/var/log/django
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    stop_grace_period: 30s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health-check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  frontend:
    build: ./frontend
    container_name: frontend_app_v2
    networks:
      - airflow-net-v2
    ports:
      - "8003:8003"
    volumes:
      - ./frontend:/app
    environment:
      - DEPLOY_COUNTRY=${DEPLOY_COUNTRY:-US}
      - FRONTEND_LANGUAGE=${FRONTEND_LANGUAGE:-en}
      - REACT_APP_API_URL=http://localhost:8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  airflow-webserver:
    image: apache/airflow:2.7.2
    container_name: airflow_webserver_v2
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-guigui}@postgres/${POSTGRES_DB:-pandemies}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-tym5nXoBS3cJ9UAerkjX6Ffebr5AqU3YjQWf31JGKfA=}
      AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE: 10
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY:-113QWMWwTtueNy-ca6BUFeOF5mRTBoQ6Rb7elifprXY}
      DEPLOY_COUNTRY: ${DEPLOY_COUNTRY:-US}
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    networks:
      - airflow-net-v2
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/scripts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    command: >
      bash -c "airflow db upgrade &&
               airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true &&
               airflow webserver"

  airflow-scheduler:
    image: apache/airflow:2.7.2
    container_name: airflow_scheduler_v2
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-guigui}@postgres/${POSTGRES_DB:-pandemies}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-tym5nXoBS3cJ9UAerkjX6Ffebr5AqU3YjQWf31JGKfA=}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_WEBSERVER_SECRET_KEY:-113QWMWwTtueNy-ca6BUFeOF5mRTBoQ6Rb7elifprXY}
      DEPLOY_COUNTRY: ${DEPLOY_COUNTRY:-US}
    networks:
      - airflow-net-v2
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/scripts
    command: "airflow scheduler"
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\""]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s

networks:
  airflow-net-v2:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_v2:
    driver: local
  metabase_data_v2:
    driver: local
  ml_models_v2:
    driver: local